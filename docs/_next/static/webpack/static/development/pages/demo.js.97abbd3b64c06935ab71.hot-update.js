webpackHotUpdate("static/development/pages/demo.js",{

/***/ "../flowjv/dist/jsonflow/blocks/object.js":
/*!************************************************!*\
  !*** ../flowjv/dist/jsonflow/blocks/object.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.execObjectFlow = void 0;\nvar jsonlogic_1 = __webpack_require__(/*! ../../jsonlogic */ \"../flowjv/dist/jsonlogic/index.js\");\nvar get_1 = __importDefault(__webpack_require__(/*! lodash/get */ \"../../node_modules/lodash/get.js\"));\nvar unset_1 = __importDefault(__webpack_require__(/*! lodash/unset */ \"../../node_modules/lodash/unset.js\"));\nvar flowatoms_1 = __webpack_require__(/*! ./flowatoms */ \"../flowjv/dist/jsonflow/blocks/flowatoms/index.js\");\nexports.execObjectFlow = function (flow, data, flowContext, options) {\n    var e_1, _a, e_2, _b;\n    var _c;\n    var properties = flow.properties;\n    var errorStore = { errors: [], isValid: true };\n    try {\n        for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {\n            var config = properties_1_1.value;\n            if (config.type === \"switch\") {\n                var cond = jsonlogic_1.execJSONExpression(config.cond, data);\n                if (options === null || options === void 0 ? void 0 : options.enforceSchema) {\n                    try {\n                        for (var _d = (e_2 = void 0, __values(Object.keys(config.cases))), _e = _d.next(); !_e.done; _e = _d.next()) {\n                            var v = _e.value;\n                            if (v !== cond) {\n                                config.cases[v].forEach(function (prop) {\n                                    return unset_1.default(data.data, __spread(flowContext.refPath, [prop.key]));\n                                });\n                            }\n                        }\n                    }\n                    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                    finally {\n                        try {\n                            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                    }\n                }\n                var flow_1 = config.cases[cond];\n                if (flow_1) {\n                    var result = exports.execObjectFlow({ type: \"object\", properties: flow_1 }, data, flowContext, options);\n                    if (!result.isValid) {\n                        if (options === null || options === void 0 ? void 0 : options.aggressive) {\n                            errorStore = {\n                                isValid: false,\n                                errors: __spread(errorStore.errors, result.errors),\n                            };\n                        }\n                        else {\n                            return result;\n                        }\n                    }\n                }\n                continue;\n            }\n            if (config.type === \"if\") {\n                var cond = !!jsonlogic_1.execJSONExpression(config.cond, data);\n                if (options === null || options === void 0 ? void 0 : options.enforceSchema) {\n                    if (cond) {\n                        // delete false fields.\n                        (_c = config.false) === null || _c === void 0 ? void 0 : _c.forEach(function (v) {\n                            unset_1.default(data.data, __spread(flowContext.refPath, [v.key]).join(\".\"));\n                        });\n                    }\n                    else {\n                        // delete true fields.\n                        config.true.forEach(function (v) {\n                            unset_1.default(data.data, __spread(flowContext.refPath, [v.key]).join(\".\"));\n                        });\n                    }\n                }\n                var flow_2 = cond ? config.true : config.false;\n                if (flow_2) {\n                    var result = exports.execObjectFlow({ type: \"object\", properties: flow_2 }, data, flowContext, options);\n                    if (!result.isValid) {\n                        if (options === null || options === void 0 ? void 0 : options.aggressive) {\n                            errorStore = {\n                                isValid: false,\n                                errors: __spread(errorStore.errors, result.errors),\n                            };\n                        }\n                        else {\n                            return result;\n                        }\n                    }\n                }\n                continue;\n            }\n            var ignoreKey = config.ignoreKey, key = config.key;\n            if (ignoreKey) {\n                var ignore = !!jsonlogic_1.execJSONExpression(ignoreKey, data);\n                if (ignore)\n                    continue;\n            }\n            var refPath = __spread(flowContext.refPath, [key]);\n            switch (config.type) {\n                case \"object\": {\n                    return exports.execObjectFlow(config, data, __assign(__assign({}, flowContext), { refPath: refPath }));\n                }\n                // Default specifies a primitive value type!\n                default: {\n                    var result = flowatoms_1.execPrimitiveFlow(config, __assign(__assign({}, data), { ref: get_1.default(data.data, key) }), __assign(__assign({}, flowContext), { refPath: refPath }));\n                    if (!result.isValid) {\n                        if (options === null || options === void 0 ? void 0 : options.aggressive) {\n                            // If aggressive, collect all errors!\n                            errorStore = {\n                                isValid: false,\n                                errors: __spread(errorStore.errors, result.errors),\n                            };\n                            continue;\n                        }\n                        return result;\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return errorStore;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../flowjv/dist/jsonflow/blocks/object.js\n");

/***/ })

})